if (${MCU_NAME} MATCHES "^PIC18F25K40$|^PIC18F45K40$|^PIC18LF25K40$|^PIC18F24K40$|^PIC18LF24K40$|^PIC18LF45K40$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM_256_1 UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM_256_1 PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_256_1/__Lib_EEPROM_256_1.mcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_256_1")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM_256_1)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_256_1/__Lib_EEPROM_256_1.mcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

if (${MCU_NAME} MATCHES "^PIC18F55K42$|^PIC18LF45K42$|^PIC18LF25K42$|^PIC18F24K42$|^PIC18LF55K42$|^PIC18F25K42$|^PIC18F45K42$|^PIC18LF24K42$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM_256_K42 UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM_256_K42 PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_256_K42/__Lib_EEPROM_256_K42.mcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_256_K42")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM_256_K42)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_256_K42/__Lib_EEPROM_256_K42.mcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

if (${MCU_NAME} MATCHES "^PIC18F8527$|^PIC18F4682$|^PIC18F67K22$|^PIC18F46K22$|^PIC18F2620$|^PIC18LF2680$|^PIC18LF66K80$|^PIC18F6525$|^PIC18F85K22$|^PIC18LF8722$|^PIC18LF2620$|^PIC18F6620$|^PIC18F25K80$|^PIC18F67K90$|^PIC18F2525$|^PIC18F4620$|^PIC18F66K90$|^PIC18F6723$|^PIC18F8585$|^PIC18LF45K80$|^PIC18F87K22$|^PIC18LF6622$|^PIC18LF6627$|^PIC18F2585$|^PIC18LF8520$|^PIC18F26K20$|^PIC18LF6628$|^PIC18LF2525$|^PIC18LF8628$|^PIC18LF8622$|^PIC18F4685$|^PIC18F6680$|^PIC18LF6723$|^PIC18F8723$|^PIC18F4525$|^PIC18F86K22$|^PIC18F65K22$|^PIC18F26K22$|^PIC18LF8723$|^PIC18F8722$|^PIC18LF8627$|^PIC18F8620$|^PIC18F4585$|^PIC18LF46K22$|^PIC18F6627$|^PIC18LF4525$|^PIC18LF4682$|^PIC18F66K22$|^PIC18LF6520$|^PIC18F65K90$|^PIC18LF4585$|^PIC18F46K20$|^PIC18LF2682$|^PIC18LF2685$|^PIC18F8628$|^PIC18F2685$|^PIC18LF25K80$|^PIC18F87K90$|^PIC18F6520$|^PIC18LF26K80$|^PIC18F65K80$|^PIC18F86K90$|^PIC18F4680$|^PIC18F8525$|^PIC18F6720$|^PIC18LF8527$|^PIC18LF2585$|^PIC18F85K90$|^PIC18F66K80$|^PIC18LF26K22$|^PIC18LF65K80$|^PIC18F8621$|^PIC18F46K80$|^PIC18F2682$|^PIC18LF4680$|^PIC18F6622$|^PIC18F6621$|^PIC18LF8720$|^PIC18F8720$|^PIC18F6628$|^PIC18F8627$|^PIC18F6527$|^PIC18F8680$|^PIC18F26K80$|^PIC18F45K80$|^PIC18F6585$|^PIC18F2680$|^PIC18LF6722$|^PIC18LF4620$|^PIC18LF46K80$|^PIC18LF6527$|^PIC18F6722$|^PIC18F8622$|^PIC18F8520$|^PIC18LF4685$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM_1024 UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM_1024 PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_1024/__Lib_EEPROM_1024.mcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_1024")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM_1024)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_1024/__Lib_EEPROM_1024.mcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

if (${MCU_NAME} MATCHES "^PIC18F14K22$|^PIC18LF4580$|^PIC18F2520$|^PIC18F2431$|^PIC18LF2320$|^PIC18LF2331$|^PIC18LF2455$|^PIC18LF2523$|^PIC18F2480$|^PIC18F4480$|^PIC18F242$|^PIC18LF2420$|^PIC18F23K22$|^PIC18LF2480$|^PIC18LF2550$|^PIC18LF2520$|^PIC18LF4420$|^PIC18F45K22$|^PIC18F442$|^PIC18F45K20$|^PIC18F258$|^PIC18F44K20$|^PIC18F4220$|^PIC18F2220$|^PIC18LF4550$|^PIC18F2221$|^PIC18LF1220$|^PIC18F2553$|^PIC18F25K50$|^PIC18F4221$|^PIC18F4523$|^PIC18F2321$|^PIC18F13K22$|^PIC18LF4331$|^PIC18F1320$|^PIC18F4439$|^PIC18LF2321$|^PIC18F1230$|^PIC18F2580$|^PIC18F23K20$|^PIC18LF25K50$|^PIC18F4420$|^PIC18F14K50$|^PIC18LF2580$|^PIC18LF23K22$|^PIC18LF4523$|^PIC18F2439$|^PIC18LF4520$|^PIC18LF45K22$|^PIC18LF2458$|^PIC18F4423$|^PIC18F2420$|^PIC18F2423$|^PIC18LF24K22$|^PIC18LF4221$|^PIC18LF2423$|^PIC18F2331$|^PIC18LF1230$|^PIC18LF1330$|^PIC18LF4553$|^PIC18F44K22$|^PIC18LF2553$|^PIC18F4539$|^PIC18F1330$|^PIC18F43K22$|^PIC18F2550$|^PIC18F2458$|^PIC18F43K20$|^PIC18F4431$|^PIC18F24K20$|^PIC18F2320$|^PIC18F248$|^PIC18LF1320$|^PIC18F1220$|^PIC18F45K50$|^PIC18LF4321$|^PIC18LF4480$|^PIC18LF4431$|^PIC18LF45K50$|^PIC18F452$|^PIC18F448$|^PIC18F4550$|^PIC18F24K50$|^PIC18LF4458$|^PIC18F252$|^PIC18LF13K22$|^PIC18LF4220$|^PIC18F458$|^PIC18LF2221$|^PIC18LF4320$|^PIC18LF43K22$|^PIC18F4520$|^PIC18F24K22$|^PIC18LF2220$|^PIC18F2539$|^PIC18LF4423$|^PIC18F4553$|^PIC18LF13K50$|^PIC18LF2431$|^PIC18F4455$|^PIC18F13K50$|^PIC18F25K22$|^PIC18LF4455$|^PIC18F4580$|^PIC18F4331$|^PIC18LF14K50$|^PIC18F4321$|^PIC18F4320$|^PIC18LF14K22$|^PIC18F2523$|^PIC18F4458$|^PIC18F2455$|^PIC18LF24K50$|^PIC18LF44K22$|^PIC18F25K20$|^PIC18LF25K22$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM_256 UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM_256 PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_256/__Lib_EEPROM_256.mcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_256")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM_256)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_256/__Lib_EEPROM_256.mcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

if (${MCU_NAME} MATCHES "^PIC18LF46K42$|^PIC18LF26K42$|^PIC18F26K83$|^PIC18F57K42$|^PIC18F46K42$|^PIC18LF57K42$|^PIC18LF47K42$|^PIC18F27K42$|^PIC18F56K42$|^PIC18F25K83$|^PIC18F26K42$|^PIC18LF27K42$|^PIC18F47K42$|^PIC18LF56K42$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM_1024_K42 UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM_1024_K42 PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_1024_K42/__Lib_EEPROM_1024_K42.mcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_1024_K42")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM_1024_K42)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_1024_K42/__Lib_EEPROM_1024_K42.mcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

if (${MCU_NAME} MATCHES "^PIC18F27K40$|^PIC18LF65K40$|^PIC18F26K40$|^PIC18LF67K40$|^PIC18LF47K40$|^PIC18F66K40$|^PIC18LF46K40$|^PIC18LF66K40$|^PIC18F47K40$|^PIC18F67K40$|^PIC18F65K40$|^PIC18LF27K40$|^PIC18F46K40$|^PIC18LF26K40$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM_1024_1 UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM_1024_1 PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_1024_1/__Lib_EEPROM_1024_1.mcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_1024_1")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM_1024_1)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/P18/__Lib_EEPROM_1024_1/__Lib_EEPROM_1024_1.mcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

if (${MCU_NAME} MATCHES "^PIC16LF19197$|^PIC16F18875$|^PIC16LF18313$|^PIC16LF18345$|^PIC16LF19196$|^PIC16F19195$|^PIC16F18323$|^PIC16F18876$|^PIC16F18326$|^PIC16F19155$|^PIC16F19185$|^PIC16F18313$|^PIC16LF18877$|^PIC16LF18876$|^PIC16LF19176$|^PIC16LF18854$|^PIC16F18854$|^PIC16F18344$|^PIC16LF18857$|^PIC16LF18324$|^PIC16F19186$|^PIC16F18855$|^PIC16LF19156$|^PIC16F18346$|^PIC16F19175$|^PIC16F18857$|^PIC16LF18323$|^PIC16F18345$|^PIC16LF18855$|^PIC16LF18344$|^PIC16F18877$|^PIC16F18324$|^PIC16LF19195$|^PIC16LF18346$|^PIC16F18325$|^PIC16LF18325$|^PIC16F19176$|^PIC16F19156$|^PIC16F18856$|^PIC16F19196$|^PIC16F19197$|^PIC16LF18326$|^PIC16LF19155$|^PIC16LF19185$|^PIC16LF19175$|^PIC16LF18875$|^PIC16LF19186$|^PIC16LF18856$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM_256 UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM_256 PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/P16_Enh/__Lib_EEPROM_256/__Lib_EEPROM_256.mcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/P16_Enh/__Lib_EEPROM_256")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM_256)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/P16_Enh/__Lib_EEPROM_256/__Lib_EEPROM_256.mcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

if (${MCU_NAME} MATCHES "^PIC16F1824$|^PIC16LF1937$|^PIC16LF1824$|^PIC16LF1783$|^PIC16F1847$|^PIC16F1947$|^PIC16LF1826$|^PIC16LF1939$|^PIC16LF1786$|^PIC16F1938$|^PIC16LF1788$|^PIC12F1840$|^PIC16LF1947$|^PIC16F1789$|^PIC16LF1787$|^PIC16F1788$|^PIC16LF1936$|^PIC16LF1828$|^PIC16LF1789$|^PIC12F1822$|^PIC16F1783$|^PIC16F1825$|^PIC16F1826$|^PIC16F1827$|^PIC16F1829$|^PIC16LF1825$|^PIC16F1934$|^PIC16F1937$|^PIC16F1939$|^PIC16F1782$|^PIC16F1936$|^PIC16LF1933$|^PIC16F1829LIN$|^PIC16LF1934$|^PIC16F1933$|^PIC12LF1840$|^PIC16F1946$|^PIC16F1786$|^PIC16LF1827$|^PIC16F1823$|^PIC12LF1822$|^PIC16F1787$|^PIC16LF1829$|^PIC16LF1946$|^PIC16LF1823$|^PIC16LF1847$|^PIC16LF1782$|^PIC16F1828$|^PIC16LF1938$|^PIC16F1784$|^PIC16LF1784$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/P16_Enh/__Lib_EEPROM/__Lib_EEPROM.mcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/P16_Enh/__Lib_EEPROM")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/P16_Enh/__Lib_EEPROM/__Lib_EEPROM.mcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

if (${MCU_NAME} MATCHES "^PIC12F629$|^PIC12F675$|^PIC16F870$|^PIC16F84$|^PIC16F874$|^PIC16HV785$|^PIC16F636$|^PIC16F627A$|^PIC16F687$|^PIC16F628$|^PIC16F631$|^PIC16F917$|^PIC16F876$|^PIC16F630$|^PIC16F87$|^PIC16F648A$|^PIC16F689$|^PIC16F88$|^PIC16F913$|^PIC16F873A$|^PIC16F871$|^PIC16F882$|^PIC16F628A$|^PIC16F690$|^PIC16F886$|^PIC16F684$|^PIC16CR84$|^PIC16F883$|^PIC16F83$|^PIC16F873$|^PIC16F914$|^PIC16F876A$|^PIC16F676$|^PIC16F877A$|^PIC12F683$|^PIC16F819$|^PIC16F872$|^PIC16F785$|^PIC16F677$|^PIC12F635$|^PIC16CR83$|^PIC16F84A$|^PIC16F639$|^PIC16F688$|^PIC16F877$|^PIC16F627$|^PIC16F887$|^PIC16F874A$|^PIC16F685$|^PIC16F818$|^PIC16F916$|^PIC16F884$|^PIC16F946$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/P16/__Lib_EEPROM/__Lib_EEPROM.mcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/P16/__Lib_EEPROM")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/P16/__Lib_EEPROM/__Lib_EEPROM.mcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

