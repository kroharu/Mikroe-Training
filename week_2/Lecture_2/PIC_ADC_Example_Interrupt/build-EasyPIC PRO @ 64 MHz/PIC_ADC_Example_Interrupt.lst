;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 12/9/2022 8:27:05
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF1E  	GOTO        60
_ADC_ISR:
;main.c,17 :: 		void ADC_ISR() iv 8 {
0x0008	0xF015C000  	MOVFF       R0, 21
;main.c,19 :: 		adc_rd = ADCBUF0;
0x000C	0xF016CFC2  	MOVFF       ADCBUF0, _adc_rd
0x0010	0xF017CFC3  	MOVFF       ADCBUF0+1, _adc_rd+1
;main.c,22 :: 		LATD = adc_rd;
0x0014	0xFF8CC016  	MOVFF       _adc_rd, LATD
;main.c,24 :: 		LATE = adc_rd >> 8;
0x0018	0xF000C017  	MOVFF       _adc_rd+1, R0
0x001C	0x6A01      	CLRF        R0+1 
0x001E	0xFF8DC000  	MOVFF       R0, LATE
;main.c,26 :: 		PIR1.ADIE = 0; // Clear the interrupt flag.
0x0022	0x9C9E      	BCF         PIR1, 6 
;main.c,27 :: 		}
L_end_ADC_ISR:
L__ADC_ISR6:
0x0024	0xF000C015  	MOVFF       21, R0
0x0028	0x0011      	RETFIE      1
; end of _ADC_ISR
___FillZeros:
;__Lib_System.c,19 :: 		
;__Lib_System.c,20 :: 		
L___FillZeros1:
0x002A	0x50EA      	MOVF        FSR0+1, 0 
0x002C	0x5CE2      	SUBWF       FSR1+1, 0 
0x002E	0xE102      	BNZ         L____FillZeros12
0x0030	0x50E9      	MOVF        FSR0, 0 
0x0032	0x5CE1      	SUBWF       FSR1, 0 
L____FillZeros12:
0x0034	0xE202      	BC          L___FillZeros2
;__Lib_System.c,21 :: 		
0x0036	0x6AE6      	CLRF        POSTINC1 
0x0038	0xD7F8      	BRA         L___FillZeros1
L___FillZeros2:
;__Lib_System.c,22 :: 		
L_end___FillZeros:
0x003A	0x0012      	RETURN      0
; end of ___FillZeros
_main:
;main.c,30 :: 		void main(void) {
;main.c,35 :: 		ANCON1.B3 = 1;
0x003C	0xF000EC4C  	CALL        152, 0
0x0040	0x010E      	MOVLB       14
0x0042	0x8747      	BSF         ANCON1, 3, 1
;main.c,37 :: 		TRISA.B3 = 1;   // Set direction of RA3 pin as input.
0x0044	0x8692      	BSF         TRISA, 3 
;main.c,39 :: 		TRISD = 0x00;   // Set direction of PORTD as output.
0x0046	0x6A95      	CLRF        TRISD 
;main.c,40 :: 		TRISE = 0x00;   // Set direction of PORTE as output.
0x0048	0x6A96      	CLRF        TRISE 
;main.c,46 :: 		ADCON1L = 0x70;
0x004A	0x0E70      	MOVLW       112
0x004C	0x6EC0      	MOVWF       ADCON1L 
;main.c,48 :: 		ADCON1H.MODE12 = 1;
0x004E	0x84C1      	BSF         ADCON1H, 2 
;main.c,50 :: 		ADCSS0H = 0;
0x0050	0x6B83      	CLRF        ADCSS0H, 1
;main.c,53 :: 		ADCON3H = 0x1F;
0x0052	0x0E1F      	MOVLW       31
0x0054	0x6F8B      	MOVWF       ADCON3H, 1
;main.c,59 :: 		ADCON3L = 0x02;
0x0056	0x0E02      	MOVLW       2
0x0058	0x6F8A      	MOVWF       ADCON3L, 1
;main.c,61 :: 		ADCON2L = 0;
0x005A	0x6B8C      	CLRF        ADCON2L, 1
;main.c,63 :: 		ADCHS0L = 3;
0x005C	0x0E03      	MOVLW       3
0x005E	0x6F86      	MOVWF       ADCHS0L, 1
;main.c,67 :: 		ADCON1H.ADON = 1;   // turn ADC ON
0x0060	0x8EC1      	BSF         ADCON1H, 7 
;main.c,69 :: 		INTCON.PEIE = 1;    // Peripheral interrupt ON.
0x0062	0x8CF2      	BSF         INTCON, 6 
;main.c,70 :: 		INTCON.GIE = 1;     // Global interrupt ON.
0x0064	0x8EF2      	BSF         INTCON, 7 
;main.c,71 :: 		PIE1.ADIE = 1;      // ADC module interrupt ON.
0x0066	0x8C9D      	BSF         PIE1, 6 
;main.c,73 :: 		Delay_ms(100);      // Wait for the module to stabilize.
0x0068	0x0E09      	MOVLW       9
0x006A	0x6E0B      	MOVWF       R11, 0
0x006C	0x0E1E      	MOVLW       30
0x006E	0x6E0C      	MOVWF       R12, 0
0x0070	0x0EE4      	MOVLW       228
0x0072	0x6E0D      	MOVWF       R13, 0
L_main0:
0x0074	0x2E0D      	DECFSZ      R13, 1, 0
0x0076	0xD7FE      	BRA         L_main0
0x0078	0x2E0C      	DECFSZ      R12, 1, 0
0x007A	0xD7FC      	BRA         L_main0
0x007C	0x2E0B      	DECFSZ      R11, 1, 0
0x007E	0xD7FA      	BRA         L_main0
0x0080	0x0000      	NOP
;main.c,76 :: 		TRISL.B1 = 0;
0x0082	0x93E6      	BCF         TRISL, 1, 1
;main.c,77 :: 		TRISG.B4 = 0;
0x0084	0x9898      	BCF         TRISG, 4 
;main.c,78 :: 		LATL.B1 = 1;
0x0086	0x83E5      	BSF         LATL, 1, 1
;main.c,79 :: 		LATG.B4 = 1;
0x0088	0x888F      	BSF         LATG, 4 
;main.c,82 :: 		while (1) {
L_main1:
;main.c,84 :: 		ADCON1L.SAMP = 1; // Start sampling, then after 31Tad go to conversion.
0x008A	0x82C0      	BSF         ADCON1L, 1 
;main.c,85 :: 		while (ADCON1L.DONE != 0) {
L_main3:
0x008C	0xA0C0      	BTFSS       ADCON1L, 0 
0x008E	0xD001      	BRA         L_main4
;main.c,87 :: 		} ;
0x0090	0xD7FD      	BRA         L_main3
L_main4:
;main.c,88 :: 		}
0x0092	0xD7FB      	BRA         L_main1
;main.c,89 :: 		}
L_end_main:
0x0094	0xD7FF      	BRA         $+0
; end of _main
0x0098	0xF016EE10  	LFSR        1, 22
0x009C	0xF018EE00  	LFSR        0, 24
0x00A0	0xF000EC15  	CALL        42, 0
0x00A4	0x0012      	RETURN      0
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [34]    _ADC_ISR
0x002A      [18]    ___FillZeros
0x003C      [90]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0016       [2]    _adc_rd
0x0E47       [1]    ANCON1
0x0E83       [1]    ADCSS0H
0x0E86       [1]    ADCHS0L
0x0E8A       [1]    ADCON3L
0x0E8B       [1]    ADCON3H
0x0E8C       [1]    ADCON2L
0x0EE5       [1]    LATL
0x0EE6       [1]    TRISL
0x0F8C       [1]    LATD
0x0F8D       [1]    LATE
0x0F8F       [1]    LATG
0x0F92       [1]    TRISA
0x0F95       [1]    TRISD
0x0F96       [1]    TRISE
0x0F98       [1]    TRISG
0x0F9D       [1]    PIE1
0x0F9E       [1]    PIR1
0x0FC0       [1]    ADCON1L
0x0FC1       [1]    ADCON1H
0x0FC2       [2]    ADCBUF0
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [2]    FSR1
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [2]    FSR0
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
