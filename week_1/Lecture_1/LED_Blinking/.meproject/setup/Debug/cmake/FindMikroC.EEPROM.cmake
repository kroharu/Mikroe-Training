if (${MCU_NAME} MATCHES "^STM32L083VZ$|^STM32L063C8$|^STM32L031K6$|^STM32L052T8$|^STM32L051R6$|^STM32L041F6$|^STM32L053R8$|^STM32L051C6$|^STM32L073VB$|^STM32L011D3$|^STM32L071KB$|^STM32L081KZ$|^STM32L021F4$|^STM32L011D4$|^STM32L052R8$|^STM32L041E6$|^STM32L031E4$|^STM32L083V8$|^STM32L071K8$|^STM32L083RB$|^STM32L051T8$|^STM32L011K3$|^STM32L031K4$|^STM32L072VZ$|^STM32L072KB$|^STM32L081CZ$|^STM32L083CB$|^STM32L073CB$|^STM32L051K8$|^STM32L073CZ$|^STM32L071VB$|^STM32L031F4$|^STM32L071C8$|^STM32L052K8$|^STM32L072KZ$|^STM32L031C4$|^STM32L073RZ$|^STM32L083VB$|^STM32L083RZ$|^STM32L011F4$|^STM32L041K6$|^STM32L021K4$|^STM32L051R8$|^STM32L071RZ$|^STM32L062K8$|^STM32L011F3$|^STM32L031G4$|^STM32L072RB$|^STM32L052T6$|^STM32L011G4$|^STM32L071CB$|^STM32L072V8$|^STM32L011E4$|^STM32L071V8$|^STM32L071RB$|^STM32L072CZ$|^STM32L041G6$|^STM32L011E3$|^STM32L011K4$|^STM32L041C6$|^STM32L053C8$|^STM32L031G6$|^STM32L052C6$|^STM32L073RB$|^STM32L071CZ$|^STM32L051T6$|^STM32L073V8$|^STM32L082CZ$|^STM32L083CZ$|^STM32L011G3$|^STM32L051C8$|^STM32L072CB$|^STM32L053C6$|^STM32L051K6$|^STM32L073VZ$|^STM32L021G4$|^STM32L082KZ$|^STM32L031F6$|^STM32L071KZ$|^STM32L052C8$|^STM32L071VZ$|^STM32L052R6$|^STM32L031E6$|^STM32L072RZ$|^STM32L031C6$|^STM32L021D4$|^STM32L052K6$|^STM32L063R8$|^STM32L053R6$|^STM32L072VB$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM_32L0xx UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM_32L0xx PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/STM/ST M0/__Lib_EEPROM_32L0xx/__Lib_EEPROM_32L0xx.emcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/STM/ST M0/__Lib_EEPROM_32L0xx")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM_32L0xx)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/STM/ST M0/__Lib_EEPROM_32L0xx/__Lib_EEPROM_32L0xx.emcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

if (${MCU_NAME} MATCHES "^STM32L151RE$|^STM32L151VC$|^STM32L151VE$|^STM32L100C6_A$|^STM32L151R6$|^STM32L162VE$|^STM32L152R6$|^STM32L151V8$|^STM32L151ZC$|^STM32L162ZD$|^STM32L151C8$|^STM32L151QC$|^STM32L151R8$|^STM32L152V8_A$|^STM32L151UC$|^STM32L152C8_A$|^STM32L100R8$|^STM32L152RD$|^STM32L162ZE$|^STM32L100R8_A$|^STM32L162QD$|^STM32L151ZE$|^STM32L152ZC$|^STM32L152R8$|^STM32L152QE$|^STM32L162RE$|^STM32L162RD$|^STM32L152RB$|^STM32L152ZE$|^STM32L151QE$|^STM32L152RE$|^STM32L162VC_A$|^STM32L151C8_A$|^STM32L152ZD$|^STM32L152CB$|^STM32L162VD$|^STM32L152C8$|^STM32L151VC_A$|^STM32L151VB_A$|^STM32L152QC$|^STM32L152VB$|^STM32L152VD$|^STM32L152V8$|^STM32L151R8_A$|^STM32L100C6$|^STM32L152VE$|^STM32L152C6$|^STM32L151VB$|^STM32L151RD$|^STM32L151ZD$|^STM32L162RC$|^STM32L151C6_A$|^STM32L151VD$|^STM32L151RB_A$|^STM32L152RC_A$|^STM32L151CC$|^STM32L100RB$|^STM32L151RC$|^STM32L152CB_A$|^STM32L152VC_A$|^STM32L152R6_A$|^STM32L152VC$|^STM32L151CB_A$|^STM32L151R6_A$|^STM32L100RC$|^STM32L152QD$|^STM32L152RB_A$|^STM32L151C6$|^STM32L100RB_A$|^STM32L162RC_A$|^STM32L152CC$|^STM32L151VD_X$|^STM32L151QD$|^STM32L152R8_A$|^STM32L152RC$|^STM32L162VC$|^STM32L152VB_A$|^STM32L152VD_X$|^STM32L152C6_A$|^STM32L151CB$|^STM32L151RB$|^STM32L151V8_A$|^STM32L151RC_A$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM_32L1xx UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM_32L1xx PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/STM/ST M3/__Lib_EEPROM_32L1xx/__Lib_EEPROM_32L1xx.emcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/STM/ST M3/__Lib_EEPROM_32L1xx")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM_32L1xx)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/STM/ST M3/__Lib_EEPROM_32L1xx/__Lib_EEPROM_32L1xx.emcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

if (${MCU_NAME} MATCHES "^TM4C123BH6PZ$|^TM4C123GE6PZ$|^TM4C1237E6PM$|^TM4C1232E6PM$|^TM4C123GE6PM$|^TM4C123BE6PM$|^TM4C123AE6PM$|^TM4C123GH6ZXR$|^TM4C123BH6ZRB$|^TM4C1232D5PM$|^TM4C1236H6PM$|^TM4C1231C3PM$|^TM4C1231H6PM$|^TM4C1233H6PZ$|^TM4C1230H6PM$|^TM4C123BH6PM$|^TM4C1237H6PM$|^TM4C1232H6PM$|^TM4C1233H6PGE$|^TM4C123BH6PGE$|^TM4C1237H6PGE$|^TM4C1231E6PM$|^TM4C1233H6PM$|^TM4C123AH6PM$|^TM4C1231H6PZ$|^TM4C1236D5PM$|^TM4C123GH6PGE$|^TM4C1232C3PM$|^TM4C1233E6PZ$|^TM4C123FH6PM$|^TM4C1237D5PM$|^TM4C1231H6PGE$|^TM4C1237H6PZ$|^TM4C1230C3PM$|^TM4C1233D5PZ$|^TM4C1237D5PZ$|^TM4C1230E6PM$|^TM4C123GH6ZRB$|^TM4C1236E6PM$|^TM4C1231E6PZ$|^TM4C123BE6PZ$|^TM4C1233C3PM$|^TM4C123GH6PM$|^TM4C123FE6PM$|^TM4C1237E6PZ$|^TM4C1233E6PM$|^TM4C1233D5PM$|^TM4C123GH6PZ$|^TM4C1230D5PM$|^TM4C1231D5PZ$|^TM4C1231D5PM$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM_2K UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM_2K PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/TI/TI M4/__Lib_EEPROM_2K/__Lib_EEPROM_2K.emcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/TI/TI M4/__Lib_EEPROM_2K")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM_2K)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/TI/TI M4/__Lib_EEPROM_2K/__Lib_EEPROM_2K.emcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

if (${MCU_NAME} MATCHES "^TM4C129XNCZAD$|^TM4C129XKCZAD$|^TM4C1290NCPDT$|^TM4C1294NCPDT$|^TM4C129EKCPDT$|^TM4C129DNCZAD$|^TM4C129CNCPDT$|^TM4C129ENCPDT$|^TM4C1299NCZAD$|^TM4C1292NCPDT$|^TM4C1297NCZAD$|^TM4C129DNCPDT$|^TM4C1290NCZAD$|^TM4C1294NCZAD$|^TM4C129ENCZAD$|^TM4C1294KCPDT$|^TM4C1292NCZAD$|^TM4C129CNCZAD$|^TM4C129LNCZAD$|^TM4C1299KCZAD$")


    if (NOT TARGET MikroC.EEPROM )
        add_library(__Lib_EEPROM_6K UNKNOWN IMPORTED)
    endif()
    set_target_properties(__Lib_EEPROM_6K PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES "MikroC"
    IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../bin/TI/TI M4/__Lib_EEPROM_6K/__Lib_EEPROM_6K.emcl"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../bin/TI/TI M4/__Lib_EEPROM_6K")

    set(MikroC.EEPROM_DEFINITIONS )


    if (NOT TARGET MikroC.EEPROM )
        add_library(MikroC.EEPROM INTERFACE)
    endif()

    target_link_libraries(MikroC.EEPROM INTERFACE __Lib_EEPROM_6K)
    set(MikroC.EEPROM_LIBRARIES "\"${CMAKE_CURRENT_LIST_DIR}/../bin/TI/TI M4/__Lib_EEPROM_6K/__Lib_EEPROM_6K.emcl\"")


    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(MikroC.EEPROM  DEFAULT_MSG
                                    MikroC.EEPROM_LIBRARIES)


    set(MikroC.EEPROM_INCLUDE_DIRS ${MikroC.EEPROM_INCLUDE_DIR} )



    list(APPEND LEGACY_LIBRARIES_LIST ${MikroC.EEPROM_LIBRARIES})
    
    list(JOIN LEGACY_LIBRARIES_LIST " " LEGACY_LIBRARIES_JOINED)
    set(LEGACY_LIBRARIES ${LEGACY_LIBRARIES_JOINED} CACHE STRING "" FORCE)
    ## Since mikroC cmd line needs mcl files to compile object, only way to pass those mcl files to cmake was through compiler flags.
    set( CMAKE_MikroC_FLAGS "${CMAKE_MikroC_FLAGS} ${LEGACY_LIBRARIES}")
    
    # removing duplacates from CMAKE_MikroC_FLAGS
    separate_arguments (separated NATIVE_COMMAND "${CMAKE_MikroC_FLAGS}")
    list(REMOVE_DUPLICATES separated)
    list(TRANSFORM separated PREPEND "\"")
    list(TRANSFORM separated APPEND "\"")

    list(JOIN separated " " joined)
    set(CMAKE_MikroC_FLAGS ${joined})
    unset(separated)
    unset(joined)

    
endif()

